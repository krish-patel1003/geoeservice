name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}${{ vars.ECS_REPOSITORY_NAME }}:latest
        build-args: |
          SECRET_NAME=${{ vars.SECRET_NAME }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: SSH and Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "sudo docker image prune -f && sudo docker container prune -f"
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "sudo aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}"
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "docker pull ${{ vars.ECR_REGISTRY }}${{ vars.ECS_REPOSITORY_NAME }}:latest"
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "docker stop cd_container && docker rm cd_container || true"
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "docker run -d --name cd_container -p 8000:8000 -e SECRET_NAME='${{ vars.SECRET_NAME }}' -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e S3_ACCESS_KEY_ID='${{ secrets.S3_ACCESS_KEY_ID }}' -e S3_SECRET_ACCESS_KEY='${{ secrets.S3_SECRET_ACCESS_KEY }}' ${{ vars.ECR_REGISTRY }}${{ vars.ECS_REPOSITORY_NAME }}:latest"